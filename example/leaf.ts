// Generated by https://github.com/reggi/linear-builder-class
// Do not edit this code directly
import {MatchHandler, DataHandler, ComponentHandler} from "./types.ts"
class Leaf_request {
  request(request: Request) {
    return new Leaf_pathname(
      request
    )
  }
}
class Leaf_pathname {
  constructor (
      public request: Request
  ) {}
  pathname(pathname: string) {
    return new Leaf_match(
      this.request,
      pathname
    )
  }
}
class Leaf_match {
  constructor (
      public request: Request,
      public pathname: string
  ) {}
  match<M>(match: MatchHandler<M>) {
    return new Leaf_data(
      this.request,
      this.pathname,
      match
    )
  }
}
class Leaf_data<M> {
  constructor (
      public request: Request,
      public pathname: string,
      public match: MatchHandler<M>
  ) {}
  data<D>(data: DataHandler<M, D>) {
    return new Leaf_component(
      this.request,
      this.pathname,
      this.match,
      data
    )
  }
}
class Leaf_component<M, D> {
  constructor (
      public request: Request,
      public pathname: string,
      public match: MatchHandler<M>,
      public data: DataHandler<M, D>
  ) {}
  component(component: ComponentHandler<M>) {
    return new Leaf_final(
      this.request,
      this.pathname,
      this.match,
      this.data,
      component
    )
  }
}
class Leaf_final<M, D> {
  constructor (
      public request: Request,
      public pathname: string,
      public match: MatchHandler<M>,
      public data: DataHandler<M, D>,
      public component: ComponentHandler<M>
  ) {}
}
export class Leaf extends Leaf_request {}
